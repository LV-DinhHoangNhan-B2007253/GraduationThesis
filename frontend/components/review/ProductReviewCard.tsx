import { IComment } from "@/interfaces/comment.interface";
import { getCommentOfProduct } from "@/services/product.service";
import React, { useEffect, useState } from "react";
import { format } from "date-fns";

function ProductReviewCard({ reviewId }: { reviewId: string }) {
  const [review, setReview] = useState<IComment | null>(null);
  const [isLoading, setIsLoading] = useState(true); // Tr·∫°ng th√°i loading

  const fetchReviewData = async () => {
    try {
      const data = await getCommentOfProduct(reviewId);
      setReview(data);
    } catch (error) {
      console.log(error);
    } finally {
      setIsLoading(false); // Ng·ª´ng loading sau khi d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i
    }
  };

  useEffect(() => {
    fetchReviewData();
  }, [reviewId]);

  if (isLoading) {
    return <div className="text-center p-4">Loading review...</div>; // Ch·ªâ hi·ªÉn th·ªã loading khi isLoading = true
  }

  if (!review) {
    return <div className="text-center p-4">No review found.</div>; // Tr∆∞·ªùng h·ª£p kh√¥ng c√≥ review
  }

  // Render c·∫£m x√∫c t∆∞∆°ng ·ª©ng v·ªõi ƒëi·ªÉm rating
  const renderEmotion = (rating: number) => {
    // M·∫£ng bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c t·ª´ 1 ƒë·∫øn 5 sao
    const emotions = [
      "R·∫•t kh√¥ng h√†i l√≤ngüò°",
      "Kh√¥ng h√†i l√≤ngüòü",
      "B√¨nh th∆∞·ªùngüòä",
      "Kh√° h√†i l√≤ngüòò",
      "R·∫•t h√†i l√≤ngüòç",
    ];

    // Ch·ªçn bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c ph√π h·ª£p v·ªõi ƒëi·ªÉm rating
    return (
      <span className="font-light  italic text-small">
        {emotions[rating - 1] || emotions[0]}{" "}
        {/* ƒê·∫£m b·∫£o kh√¥ng v∆∞·ª£t ngo√†i m·∫£ng */}
      </span>
    );
  };

  return (
    <div className=" rounded-lg p-4 my-1 w-full border border-primary-border bg-card-bg h-full ">
      <div className="flex items-start">
        {/* Avatar v√† th√¥ng tin ng∆∞·ªùi d√πng */}
        <div className="flex-shrink-0">
          <img
            loading="lazy"
            className="w-10 h-10 rounded-full object-cover"
            src={
              review.user_avatar && review.user_avatar.trim() !== ""
                ? review.user_avatar
                : "/default-avatar.png"
            }
            alt={`${review.user_name}'s avatar`}
          />
        </div>

        <div className="ml-4 flex-1">
          {/* T√™n v√† ng√†y */}
          <div className="flex justify-between items-center">
            <div>
              <h4 className="text-small text-heading font-bold capitalize ">
                {review.user_name}
              </h4>
              <p className="text-sm  text-label font-light italic ">
                {review.date
                  ? format(new Date(review.date).toLocaleString(), "dd/MM/yyyy")
                  : "No date available"}
              </p>
            </div>

            {/* ƒê√°nh gi√° sao */}
            <div className="flex items-center">
              <div>{renderEmotion(review.rating)}</div>
              {/* <span className="ml-2  text-light-primary-text dark:text-dark-primary-text ">
                {review.rating}/5w
              </span> */}
            </div>
          </div>

          {/* N·ªôi dung review */}
          <p className="mt-4 text-small text-label">{review.content}</p>

          {/* H√¨nh ·∫£nh review n·∫øu c√≥ */}
          {review.review_img && review.review_img.length > 0 && (
            <div className="flex justify-start gap-3 mt-2">
              {review.review_img.slice(0, 4).map((img, index) => (
                <img
                  loading="lazy"
                  key={index}
                  src={img}
                  alt={`Review image ${index}`}
                  className="w-14 h-14 rounded-sm  object-cover"
                />
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default ProductReviewCard;
